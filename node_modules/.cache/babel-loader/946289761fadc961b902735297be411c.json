{"remainingRequest":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/babel-loader/lib/index.js!/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/groupController.js","dependencies":[{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/groupController.js","mtime":1547060843082},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/cache-loader/dist/cjs.js","mtime":1546620803624},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/babel-loader/lib/index.js","mtime":1546620794588},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1546620798543}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nvar baseUrl = 'https://mgg7ne9n6g.execute-api.us-east-1.amazonaws.com/dev/';\n\nfunction createGroup(_x, _x2, _x3, _x4, _x5) {\n  return _createGroup.apply(this, arguments);\n}\n\nfunction _createGroup() {\n  _createGroup = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(id, name, owners, projects, members) {\n    var group, res;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            group = {\n              id: id,\n              name: name,\n              owners: owners,\n              projects: projects,\n              members: members\n            };\n            _context.next = 4;\n            return fetch(\"\".concat(baseUrl, \"data/group\"), {\n              method: 'POST',\n              body: JSON.stringify(group)\n            });\n\n          case 4:\n            res = _context.sent;\n\n            if (!res.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", group);\n\n          case 7:\n            if (res.ok) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"HTTP \".concat(res.status, \" Error: \").concat(res.statusText));\n\n          case 9:\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[0, 11]]);\n  }));\n  return _createGroup.apply(this, arguments);\n}\n\n;\n\nfunction updateGroup(_x6, _x7) {\n  return _updateGroup.apply(this, arguments);\n}\n\nfunction _updateGroup() {\n  _updateGroup = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(id, projects) {\n    var updatedGroup, res;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            updatedGroup = {\n              projects: projects\n            };\n            _context2.next = 4;\n            return fetch(\"\".concat(baseUrl, \"data/group/\").concat(id), {\n              method: 'PUT',\n              body: JSON.stringify(updatedGroup)\n            });\n\n          case 4:\n            res = _context2.sent;\n\n            if (res.ok) {\n              _context2.next = 7;\n              break;\n            }\n\n            throw new Error(\"HTTP \".concat(res.status, \" Error: \").concat(res.statusText));\n\n          case 7:\n            _context2.next = 11;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[0, 9]]);\n  }));\n  return _updateGroup.apply(this, arguments);\n}\n\n;\n\nfunction deleteGroup(_x8) {\n  return _deleteGroup.apply(this, arguments);\n}\n\nfunction _deleteGroup() {\n  _deleteGroup = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(groupId) {\n    var res;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return fetch(\"\".concat(baseUrl, \"data/group/\").concat(groupId), {\n              method: 'DELETE'\n            });\n\n          case 3:\n            res = _context3.sent;\n\n            if (res.ok) {\n              _context3.next = 6;\n              break;\n            }\n\n            throw new Error(\"HTTP \".concat(res.status, \" Error: \").concat(res.statusText));\n\n          case 6:\n            _context3.next = 10;\n            break;\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](0);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[0, 8]]);\n  }));\n  return _deleteGroup.apply(this, arguments);\n}\n\n;\n\nfunction getGroup(_x9) {\n  return _getGroup.apply(this, arguments);\n}\n\nfunction _getGroup() {\n  _getGroup = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(id) {\n    var owners, projects, members, name, res, group;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            owners = '';\n            projects = '';\n            members = '';\n            name = '';\n            _context4.prev = 4;\n            _context4.next = 7;\n            return fetch(\"\".concat(baseUrl, \"data/group/\").concat(id), {\n              method: 'GET'\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              console.log('group data');\n              console.log(data);\n              name = data.body.name;\n              owners = data.body.owners;\n              projects = data.body.projects;\n              members = data.body.members;\n            });\n\n          case 7:\n            res = _context4.sent;\n            group = {\n              id: id,\n              name: name,\n              owners: owners,\n              projects: projects,\n              members: members\n            };\n            return _context4.abrupt(\"return\", group);\n\n          case 12:\n            _context4.prev = 12;\n            _context4.t0 = _context4[\"catch\"](4);\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[4, 12]]);\n  }));\n  return _getGroup.apply(this, arguments);\n}\n\n;\nexport { createGroup, getGroup, deleteGroup, updateGroup };",{"version":3,"sources":["/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/groupController.js"],"names":["baseUrl","createGroup","id","name","owners","projects","members","group","fetch","method","body","JSON","stringify","res","ok","Error","status","statusText","console","error","updateGroup","updatedGroup","deleteGroup","groupId","getGroup","then","response","json","data","log"],"mappings":";;;;;;AAAA,IAAIA,OAAO,GAAG,6DAAd;;SAEeC,W;;;;;;;0BAAf,iBAA2BC,EAA3B,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,QAA7C,EAAuDC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEcC,YAAAA,KAFd,GAEsB;AAAEL,cAAAA,EAAE,EAAFA,EAAF;AAAKC,cAAAA,IAAI,EAAJA,IAAL;AAAWC,cAAAA,MAAM,EAANA,MAAX;AAAmBC,cAAAA,QAAQ,EAARA,QAAnB;AAA6BC,cAAAA,OAAO,EAAPA;AAA7B,aAFtB;AAAA;AAAA,mBAG0BE,KAAK,WAAIR,OAAJ,iBAAyB;AAC5CS,cAAAA,MAAM,EAAE,MADoC;AAE5CC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AAFsC,aAAzB,CAH/B;;AAAA;AAGcM,YAAAA,GAHd;;AAAA,iBAOWA,GAAG,CAACC,EAPf;AAAA;AAAA;AAAA;;AAAA,6CAQmBP,KARnB;;AAAA;AAAA,gBAUaM,GAAG,CAACC,EAVjB;AAAA;AAAA;AAAA;;AAAA,kBAWkB,IAAIC,KAAJ,gBAAkBF,GAAG,CAACG,MAAtB,qBAAuCH,GAAG,CAACI,UAA3C,EAXlB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcQC,YAAAA,OAAO,CAACC,KAAR;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBC;;SAGcC,W;;;;;;;0BAAf,kBAA2BlB,EAA3B,EAA+BG,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgBgB,YAAAA,YAFhB,GAE+B;AAAChB,cAAAA,QAAQ,EAARA;AAAD,aAF/B;AAAA;AAAA,mBAG4BG,KAAK,WAAIR,OAAJ,wBAAyBE,EAAzB,GAA+B;AAClDO,cAAAA,MAAM,EAAE,KAD0C;AAElDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeS,YAAf;AAF4C,aAA/B,CAHjC;;AAAA;AAGgBR,YAAAA,GAHhB;;AAAA,gBAOeA,GAAG,CAACC,EAPnB;AAAA;AAAA;AAAA;;AAAA,kBAQoB,IAAIC,KAAJ,gBAAkBF,GAAG,CAACG,MAAtB,qBAAuCH,GAAG,CAACI,UAA3C,EARpB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYG;;SAGYK,W;;;;;;;0BAAf,kBAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE0Bf,KAAK,WAAIR,OAAJ,wBAAyBuB,OAAzB,GAAoC;AACzDd,cAAAA,MAAM,EAAE;AADiD,aAApC,CAF/B;;AAAA;AAEcI,YAAAA,GAFd;;AAAA,gBAKWA,GAAG,CAACC,EALf;AAAA;AAAA;AAAA;;AAAA,kBAMc,IAAIC,KAAJ,gBAAkBF,GAAG,CAACG,MAAtB,qBAAuCH,GAAG,CAACI,UAA3C,EANd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYG;;SAGYO,Q;;;;;;;0BAAf,kBAAwBtB,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQE,YAAAA,MADR,GACiB,EADjB;AAEQC,YAAAA,QAFR,GAEmB,EAFnB;AAGQC,YAAAA,OAHR,GAGkB,EAHlB;AAIQH,YAAAA,IAJR,GAIe,EAJf;AAAA;AAAA;AAAA,mBAMwBK,KAAK,WAAIR,OAAJ,wBAAyBE,EAAzB,GAA+B;AACpDO,cAAAA,MAAM,EAAE;AAD4C,aAA/B,CAAL,CAEfgB,IAFe,CAEV,UAASC,QAAT,EAAmB;AACzB,qBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,aAJiB,EAIfF,IAJe,CAIV,UAASG,IAAT,EAAe;AACrBV,cAAAA,OAAO,CAACW,GAAR,CAAY,YAAZ;AACAX,cAAAA,OAAO,CAACW,GAAR,CAAYD,IAAZ;AACAzB,cAAAA,IAAI,GAAGyB,IAAI,CAAClB,IAAL,CAAUP,IAAjB;AACAC,cAAAA,MAAM,GAAGwB,IAAI,CAAClB,IAAL,CAAUN,MAAnB;AACAC,cAAAA,QAAQ,GAAGuB,IAAI,CAAClB,IAAL,CAAUL,QAArB;AACAC,cAAAA,OAAO,GAAGsB,IAAI,CAAClB,IAAL,CAAUJ,OAApB;AAED,aAZiB,CANxB;;AAAA;AAMYO,YAAAA,GANZ;AAmBUN,YAAAA,KAnBV,GAmBkB;AAACL,cAAAA,EAAE,EAAFA,EAAD;AAAKC,cAAAA,IAAI,EAAJA,IAAL;AAAWC,cAAAA,MAAM,EAANA,MAAX;AAAmBC,cAAAA,QAAQ,EAARA,QAAnB;AAA6BC,cAAAA,OAAO,EAAPA;AAA7B,aAnBlB;AAAA,8CAoBaC,KApBb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBG;AACH,SAAQN,WAAR,EAAqBuB,QAArB,EAA+BF,WAA/B,EAA4CF,WAA5C","sourcesContent":["var baseUrl = 'https://mgg7ne9n6g.execute-api.us-east-1.amazonaws.com/dev/';\n\nasync function createGroup(id, name, owners, projects, members) {\n    try {\n        const group = { id,name, owners, projects, members}\n        const res = await fetch(`${baseUrl}data/group`, {\n            method: 'POST',\n            body: JSON.stringify(group)\n        })\n        if(res.ok){\n            return group;\n        }\n        if (!res.ok) {\n            throw new Error(`HTTP ${res.status} Error: ${res.statusText}`)\n        }\n    } catch (error) {\n        console.error(error)\n    }\n};\n\n\nasync function updateGroup(id, projects) {\n      try {\n          const updatedGroup = {projects};\n          const res = await fetch(`${baseUrl}data/group/${id}`, {\n              method: 'PUT',\n              body: JSON.stringify(updatedGroup)\n          })\n          if (!res.ok) {\n              throw new Error(`HTTP ${res.status} Error: ${res.statusText}`)\n          }\n      } catch (error) {\n      }\n  };\n\n\nasync function deleteGroup(groupId) {\n    try {\n        const res = await fetch(`${baseUrl}data/group/${groupId}`, {\n          method: 'DELETE',\n      });\n      if (!res.ok) {\n        throw new Error(`HTTP ${res.status} Error: ${res.statusText}`)\n      }\n\n    } catch (error) {\n    }\n\n  };\n\n\nasync function getGroup(id) {\n    let owners = '';\n    let projects = '';\n    let members = '';\n    let name = '';\n    try {\n      const res = await fetch(`${baseUrl}data/group/${id}`, {\n        method: 'GET',\n      }).then(function(response) {\n        return response.json();\n      }).then(function(data) {\n        console.log('group data');\n        console.log(data);\n        name = data.body.name;\n        owners = data.body.owners;\n        projects = data.body.projects;\n        members = data.body.members;\n\n      });\n      let group = {id, name, owners, projects, members};\n      return group;\n\n    } catch (error) {\n    } \n  };\nexport {createGroup, getGroup, deleteGroup, updateGroup};"]}]}