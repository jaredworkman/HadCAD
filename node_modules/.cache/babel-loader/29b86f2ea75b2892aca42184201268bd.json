{"remainingRequest":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/babel-loader/lib/index.js!/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/submissionController.js","dependencies":[{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/submissionController.js","mtime":1546969585912},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/cache-loader/dist/cjs.js","mtime":1546620803624},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/babel-loader/lib/index.js","mtime":1546620794588},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1546620798543}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction createTimeRecord(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _createTimeRecord.apply(this, arguments);\n}\n\nfunction _createTimeRecord() {\n  _createTimeRecord = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(id, description, time, userId, data, links) {\n    var newSubmission;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            newSubmission = {\n              id: id,\n              description: description,\n              time: time,\n              userId: userId,\n              data: data,\n              links: links\n            };\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _createTimeRecord.apply(this, arguments);\n}\n\n;\n\nfunction createExpenseRecord() {\n  return _createExpenseRecord.apply(this, arguments);\n}\n\nfunction _createExpenseRecord() {\n  _createExpenseRecord = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2() {\n    var newSubmission;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newSubmission = {\n              id: id,\n              expenseCost: expenseCost,\n              expenseDate: expenseDate,\n              expenseDescription: expenseDescription,\n              task: task,\n              projectId: projectId,\n              groupId: groupId,\n              date: date\n            };\n            this.$store.commit('createExpenseSubmission', newSubmission);\n            console.log(newSubmission);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _createExpenseRecord.apply(this, arguments);\n}\n\n;\n\nfunction addFile() {\n  return _addFile.apply(this, arguments);\n}\n\nfunction _addFile() {\n  _addFile = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4() {\n    var links, s3, images, processImage, imagePromises;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            links = [];\n            s3 = new AWS.S3({\n              apiVersion: '2006-03-01'\n            });\n            _context4.prev = 2;\n            images = document.querySelector('#images').files;\n\n            processImage = function processImage(files, valid) {\n              var promise = Array.from(files).map(\n              /*#__PURE__*/\n              function () {\n                var _ref = _asyncToGenerator(\n                /*#__PURE__*/\n                regeneratorRuntime.mark(function _callee3(file) {\n                  var Key, imageParams;\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          Key = 'hadcad'.concat(\"-\", 'job', \"-\", file.name);\n                          imageParams = {\n                            ACL: 'public-read',\n                            Bucket: 'hadcad-files',\n                            Key: Key,\n                            Body: file\n                          };\n                          console.log(imageParams);\n                          links.push('https://s3.amazonaws.com/' + 'hadcad-files' + '/' + Key);\n                          _context3.next = 6;\n                          return s3.upload(imageParams).promise();\n\n                        case 6:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3, this);\n                }));\n\n                return function (_x7) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n              return promise;\n            };\n\n            imagePromises = processImage(images);\n            console.log(links);\n            _context4.prev = 7;\n            _context4.next = 10;\n            return Promise.all(imagePromises.concat(imagePromises));\n\n          case 10:\n            this.createTimeRecord(links);\n            _context4.next = 16;\n            break;\n\n          case 13:\n            _context4.prev = 13;\n            _context4.t0 = _context4[\"catch\"](7);\n            console.error(_context4.t0);\n\n          case 16:\n            _context4.next = 21;\n            break;\n\n          case 18:\n            _context4.prev = 18;\n            _context4.t1 = _context4[\"catch\"](2);\n            console.error(_context4.t1);\n\n          case 21:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[2, 18], [7, 13]]);\n  }));\n  return _addFile.apply(this, arguments);\n}\n\n;\nexport { createTimeRecord, createExpenseRecord, addFile };",{"version":3,"sources":["/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/submissionController.js"],"names":["createTimeRecord","id","description","time","userId","data","links","newSubmission","createExpenseRecord","expenseCost","expenseDate","expenseDescription","task","projectId","groupId","date","$store","commit","console","log","addFile","s3","AWS","S3","apiVersion","images","document","querySelector","files","processImage","valid","promise","Array","from","map","file","Key","name","imageParams","ACL","Bucket","Body","push","upload","imagePromises","Promise","all","concat","error"],"mappings":"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","sourcesContent":["async function createTimeRecord(id, description, time, userId, data, links){\n\n        const newSubmission = { id, description, time, userId, data, links};\n        \n    };\nasync function createExpenseRecord(){\n\n        const newSubmission = { id, expenseCost, expenseDate, expenseDescription, task, projectId, groupId, date};\n        this.$store.commit('createExpenseSubmission', newSubmission);\n        console.log(newSubmission);\n      };\n    \nasync function addFile(){\n        let links = [];\n        const s3 = new AWS.S3({ apiVersion: '2006-03-01' });\n        try {\n          const images = document.querySelector('#images').files;\n          const processImage = (files, valid) => {\n            const promise = Array.from(files).map(async (file) => {\n              const Key = `${'hadcad'}-${'job'}-${file.name}`;\n  \n              const imageParams = {\n                ACL: 'public-read',\n                Bucket: 'hadcad-files',\n                Key,\n                Body: file,\n              };\n              console.log(imageParams);\n              links.push('https://s3.amazonaws.com/' +  'hadcad-files' + '/' + Key);\n              await s3.upload(imageParams).promise();\n            });\n  \n            return promise;\n          };\n  \n          const imagePromises = processImage(images);\n          console.log(links);\n  \n  \n          try {\n            await Promise.all(imagePromises.concat(imagePromises));\n            this.createTimeRecord(links)\n  \n          } catch (error) {\n            console.error(error);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n  };\n  export {createTimeRecord, createExpenseRecord, addFile};\n"]}]}