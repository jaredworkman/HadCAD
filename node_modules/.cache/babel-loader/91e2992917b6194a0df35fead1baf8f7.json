{"remainingRequest":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/babel-loader/lib/index.js!/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/projectController.js","dependencies":[{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/projectController.js","mtime":1547053216188},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/cache-loader/dist/cjs.js","mtime":1546620803624},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/babel-loader/lib/index.js","mtime":1546620794588},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1546620798543}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar baseUrl = 'https://mgg7ne9n6g.execute-api.us-east-1.amazonaws.com/dev/';\n\nfunction createProject(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11) {\n  return _createProject.apply(this, arguments);\n}\n\nfunction _createProject() {\n  _createProject = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(id, name, description, status, clients, budget, deadline, members, data, lists, group) {\n    var newProject, res;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('here4');\n            newProject = {\n              id: id,\n              name: name,\n              description: description,\n              status: status,\n              clients: clients,\n              budget: budget,\n              deadline: deadline,\n              data: data,\n              members: members,\n              lists: lists,\n              group: group\n            };\n            _context.next = 5;\n            return fetch(\"\".concat(baseUrl, \"data/project\"), {\n              method: 'POST',\n              body: JSON.stringify(newProject)\n            });\n\n          case 5:\n            res = _context.sent;\n            console.log('here5');\n\n            if (res.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            console.log(res);\n            throw new Error(\"HTTP \".concat(res.status, \" Error: \").concat(res.statusText));\n\n          case 10:\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[0, 12]]);\n  }));\n  return _createProject.apply(this, arguments);\n}\n\n;\n\nfunction getProject(_x12) {\n  return _getProject.apply(this, arguments);\n}\n\nfunction _getProject() {\n  _getProject = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(id) {\n    var name, status, description, clients, budget, deadline, data, members, lists, group, res, project;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            name = '';\n            status = '';\n            description = '';\n            clients = null;\n            budget = null;\n            deadline = '';\n            data = null;\n            members = null;\n            lists = null;\n            group = null;\n            _context2.next = 13;\n            return fetch(\"\".concat(baseUrl, \"data/project/\").concat(id), {\n              method: 'GET'\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              console.log(data);\n              lists = data.body.lists;\n              group = data.body.group;\n              members = data.body.members;\n              id = data.body.id;\n              status = data.body.status;\n              name = data.body.name;\n              description = data.body.description;\n              clients = data.body.clients;\n              budget = data.body.budget;\n              deadline = data.body.deadline;\n              data = data.body.data;\n            });\n\n          case 13:\n            res = _context2.sent;\n            project = {\n              id: id,\n              name: name,\n              status: status,\n              description: description,\n              clients: clients,\n              budget: budget,\n              deadline: deadline,\n              data: data,\n              members: members,\n              lists: lists,\n              group: group\n            };\n            return _context2.abrupt(\"return\", project);\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[0, 18]]);\n  }));\n  return _getProject.apply(this, arguments);\n}\n\n;\n\nfunction updateProject(_x13, _x14) {\n  return _updateProject.apply(this, arguments);\n}\n\nfunction _updateProject() {\n  _updateProject = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(id, data) {\n    var updatedProject, res;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            updatedProject = {\n              data: data\n            };\n            _context3.next = 4;\n            return fetch(\"\".concat(baseUrl, \"data/project/\").concat(id), {\n              method: 'PUT',\n              body: JSON.stringify(updatedProject)\n            });\n\n          case 4:\n            res = _context3.sent;\n\n            if (res.ok) {\n              _context3.next = 7;\n              break;\n            }\n\n            throw new Error(\"HTTP \".concat(res.status, \" Error: \").concat(res.statusText));\n\n          case 7:\n            _context3.next = 11;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[0, 9]]);\n  }));\n  return _updateProject.apply(this, arguments);\n}\n\n;\n\nfunction deleteProject(_x15) {\n  return _deleteProject.apply(this, arguments);\n}\n\nfunction _deleteProject() {\n  _deleteProject = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(id) {\n    var res;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return fetch(\"\".concat(baseUrl, \"data/project/\").concat(id), {\n              method: 'DELETE'\n            });\n\n          case 3:\n            res = _context4.sent;\n\n            if (res.ok) {\n              _context4.next = 6;\n              break;\n            }\n\n            throw new Error(\"HTTP \".concat(res.status, \" Error: \").concat(res.statusText));\n\n          case 6:\n            _context4.next = 10;\n            break;\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[0, 8]]);\n  }));\n  return _deleteProject.apply(this, arguments);\n}\n\n;\nexport { createProject, getProject, updateProject, deleteProject };",{"version":3,"sources":["/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/modules/projectController.js"],"names":["baseUrl","createProject","id","name","description","status","clients","budget","deadline","members","data","lists","group","console","log","newProject","fetch","method","body","JSON","stringify","res","ok","Error","statusText","error","getProject","then","response","json","project","updateProject","updatedProject","deleteProject"],"mappings":"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","sourcesContent":["var baseUrl = 'https://mgg7ne9n6g.execute-api.us-east-1.amazonaws.com/dev/';\n\nasync function createProject(id, name, description, status, clients, budget, deadline, members, data, lists, group ) {\n      try {\n        console.log('here4');\n          const newProject = {id, name, description, status, clients, budget, deadline, data, members, lists, group }\n          const res = await fetch(`${baseUrl}data/project`, {\n              method: 'POST',\n              body: JSON.stringify(newProject)\n          })\n          console.log('here5');\n\n          if (!res.ok) {\n          console.log(res)\n              throw new Error(`HTTP ${res.status} Error: ${res.statusText}`)\n          }\n\n      } catch (error) {\n          console.error(error)\n      }\n};\nasync function getProject(id) {\n  try {\n    let name = '';\n    let status = '';\n    let description = '';\n    let clients = null;\n    let budget = null;\n    let deadline = '';\n    let data = null;\n    let members = null;\n    let lists = null;\n    let group = null;\n    const res = await fetch(`${baseUrl}data/project/${id}`, {\n      method: 'GET',\n    }).then(function(response) {\n      return response.json();\n    }).then(function(data) {\n      console.log(data);\n      lists = data.body.lists;\n      group = data.body.group;\n      members = data.body.members;\n      id = data.body.id;\n      status = data.body.status;\n      name = data.body.name;\n      description = data.body.description;\n      clients = data.body.clients;\n      budget = data.body.budget;\n      deadline = data.body.deadline;\n      data = data.body.data;\n    });\n    const project = { id, name, status, description, clients, budget, deadline, data, members, lists, group };\n    return project;\n  } catch (error) {\n    console.error(error)\n  }\n};\nasync function updateProject(id, data) {\n  try {\n      const updatedProject = {data};\n      const res = await fetch(`${baseUrl}data/project/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(updatedProject)\n\n    })\n    if (!res.ok) {\n      throw new Error(`HTTP ${res.status} Error: ${res.statusText}`)\n    }\n\n  } catch (error) {\n  }\n};\nasync function deleteProject(id) {\n  try {\n      const res = await fetch(`${baseUrl}data/project/${id}`, {\n        method: 'DELETE',\n    });\n    if (!res.ok) {\n      throw new Error(`HTTP ${res.status} Error: ${res.statusText}`)\n    }\n\n  } catch (error) {\n  }\n};\n\nexport {createProject, getProject, updateProject, deleteProject};"]}]}