{"remainingRequest":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/views/Projects.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/src/views/Projects.vue","mtime":1547056073882},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/cache-loader/dist/cjs.js","mtime":1546620803624},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/babel-loader/lib/index.js","mtime":1546620794588},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/vuetify-loader/lib/loader.js","mtime":1546620811655},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/cache-loader/dist/cjs.js","mtime":1546620803624},{"path":"/Users/jaredrussellworkman/Desktop/HADDY/caddyworkflow/node_modules/vue-loader/lib/index.js","mtime":1546620804030}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\r\nimport Project from '@/components/Project.vue'\r\n\r\nexport default {\r\n\tcomponents: {\r\n\t\tProject\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t}\r\n\t},\r\n\tmethods: {\r\n\t\tnext () {\r\n\t\t\tconst active = parseInt(this.active);\r\n\t\t\tthis.active = (active < 2 ? active + 1 : 0);\r\n\t\t},\r\n\t\taddTimeRecord(links){\r\n\t\t\tconst uuidv4 = require('uuid/v4');\r\n\t\t\tconst id = uuidv4();\r\n\t\t\tconst description = this.description;\r\n\t\t\tconst time = this.min + (this.hr * 60);\r\n\t\t\tconst d = new Date();\r\n\t\t\tconst date = d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();\r\n\t\t\tconst userId = this.user.id;\r\n\t\t\tconst newSubmission = { id, description, time, userId, date, links};\r\n\t\t\tthis.$store.commit('createTimeSubmission', newSubmission);\r\n        \tthis.updateProject();\r\n\t\t},\r\n\t\tcreateExpenseRecord(links){\r\n\t\t\tconst uuidv4 = require('uuid/v4');\r\n\t\t\tconst id = uuidv4();\r\n\t\t\tconst description = this.description;\r\n\t\t\tconst cost = this.cost;\r\n\t\t\tconst userId = this.user.id;\r\n\t\t\tconst d = new Date();\r\n\t\t\tconst date = d.getDate + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();\r\n\t\t\tconst newSubmission = { id, description, cost, userId, date, links};\r\n\t\t\tthis.$store.commit('createExpenseSubmission', newSubmission);\r\n\t\t\tthis.updateProject();\r\n\t\t},\r\n\t\tcreateTask(){\r\n\t\t\tconst d = new Date();\r\n\t\t\tconst name = this.name;\r\n\t\t\tconst id = name + '_' +  this.taskName + '_' + (d.getMonth() + 1) + '_' + d.getFullYear();\r\n\t\t\tconst description = this.description;\r\n\t\t\tconst deadline = document.getElementById('deadline').value;\r\n\t\t\tconst estHours = this.estHours;\r\n\t\t\tconst status = this.status;\r\n\t\t\tconst tag = this.tag;\r\n\t\t\tconst list = {name, tag};\r\n\t\t\tconst timeSubmissions = [];\r\n\t\t\tconst expenseSubmissions = [];\r\n\t\t\tconst newTask = {id, name, description, deadline, estHours, status, list, timeSubmissions, expenseSubmissions};\r\n\t\t\tthis.$store.commit('createTask', newTask);\r\n\t\t\tthis.updateProject();\r\n\t\t},\r\n\t\tasync addFile(){\r\n\t\t\tlet links = [];\r\n\t\t\tconst s3 = new AWS.S3({ apiVersion: '2006-03-01' });\r\n\t\t\ttry {\r\n\t\t\tconst images = document.querySelector('#images').files;\r\n\t\t\tconst processImage = (files, valid) => {\r\n\t\t\t\tconst promise = Array.from(files).map(async (file) => {\r\n\t\t\t\tconst Key = `${'hadcad'}-${'job'}-${file.name}`;\r\n\t\r\n\t\t\t\tconst imageParams = {\r\n\t\t\t\t\tACL: 'public-read',\r\n\t\t\t\t\tBucket: 'hadcad-files',\r\n\t\t\t\t\tKey,\r\n\t\t\t\t\tBody: file,\r\n\t\t\t\t};\r\n\t\t\t\tconsole.log(imageParams);\r\n\t\t\t\tlinks.push('https://s3.amazonaws.com/' +  'hadcad-files' + '/' + Key);\r\n\t\t\t\tawait s3.upload(imageParams).promise();\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\treturn promise;\r\n          };\r\n  \r\n          const imagePromises = processImage(images);\r\n          console.log(links);\r\n  \r\n  \r\n          try {\r\n            await Promise.all(imagePromises.concat(imagePromises));\r\n            this.createTimeRecord(links)\r\n  \r\n          } catch (error) {\r\n            console.error(error);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n\t}\r\n}\r\n}\r\n",{"version":3,"sources":["Projects.vue"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Projects.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n<div>\r\n\t<Project />\r\n\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport Project from '@/components/Project.vue'\r\n\r\nexport default {\r\n\tcomponents: {\r\n\t\tProject\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t}\r\n\t},\r\n\tmethods: {\r\n\t\tnext () {\r\n\t\t\tconst active = parseInt(this.active);\r\n\t\t\tthis.active = (active < 2 ? active + 1 : 0);\r\n\t\t},\r\n\t\taddTimeRecord(links){\r\n\t\t\tconst uuidv4 = require('uuid/v4');\r\n\t\t\tconst id = uuidv4();\r\n\t\t\tconst description = this.description;\r\n\t\t\tconst time = this.min + (this.hr * 60);\r\n\t\t\tconst d = new Date();\r\n\t\t\tconst date = d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();\r\n\t\t\tconst userId = this.user.id;\r\n\t\t\tconst newSubmission = { id, description, time, userId, date, links};\r\n\t\t\tthis.$store.commit('createTimeSubmission', newSubmission);\r\n        \tthis.updateProject();\r\n\t\t},\r\n\t\tcreateExpenseRecord(links){\r\n\t\t\tconst uuidv4 = require('uuid/v4');\r\n\t\t\tconst id = uuidv4();\r\n\t\t\tconst description = this.description;\r\n\t\t\tconst cost = this.cost;\r\n\t\t\tconst userId = this.user.id;\r\n\t\t\tconst d = new Date();\r\n\t\t\tconst date = d.getDate + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();\r\n\t\t\tconst newSubmission = { id, description, cost, userId, date, links};\r\n\t\t\tthis.$store.commit('createExpenseSubmission', newSubmission);\r\n\t\t\tthis.updateProject();\r\n\t\t},\r\n\t\tcreateTask(){\r\n\t\t\tconst d = new Date();\r\n\t\t\tconst name = this.name;\r\n\t\t\tconst id = name + '_' +  this.taskName + '_' + (d.getMonth() + 1) + '_' + d.getFullYear();\r\n\t\t\tconst description = this.description;\r\n\t\t\tconst deadline = document.getElementById('deadline').value;\r\n\t\t\tconst estHours = this.estHours;\r\n\t\t\tconst status = this.status;\r\n\t\t\tconst tag = this.tag;\r\n\t\t\tconst list = {name, tag};\r\n\t\t\tconst timeSubmissions = [];\r\n\t\t\tconst expenseSubmissions = [];\r\n\t\t\tconst newTask = {id, name, description, deadline, estHours, status, list, timeSubmissions, expenseSubmissions};\r\n\t\t\tthis.$store.commit('createTask', newTask);\r\n\t\t\tthis.updateProject();\r\n\t\t},\r\n\t\tasync addFile(){\r\n\t\t\tlet links = [];\r\n\t\t\tconst s3 = new AWS.S3({ apiVersion: '2006-03-01' });\r\n\t\t\ttry {\r\n\t\t\tconst images = document.querySelector('#images').files;\r\n\t\t\tconst processImage = (files, valid) => {\r\n\t\t\t\tconst promise = Array.from(files).map(async (file) => {\r\n\t\t\t\tconst Key = `${'hadcad'}-${'job'}-${file.name}`;\r\n\t\r\n\t\t\t\tconst imageParams = {\r\n\t\t\t\t\tACL: 'public-read',\r\n\t\t\t\t\tBucket: 'hadcad-files',\r\n\t\t\t\t\tKey,\r\n\t\t\t\t\tBody: file,\r\n\t\t\t\t};\r\n\t\t\t\tconsole.log(imageParams);\r\n\t\t\t\tlinks.push('https://s3.amazonaws.com/' +  'hadcad-files' + '/' + Key);\r\n\t\t\t\tawait s3.upload(imageParams).promise();\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\treturn promise;\r\n          };\r\n  \r\n          const imagePromises = processImage(images);\r\n          console.log(links);\r\n  \r\n  \r\n          try {\r\n            await Promise.all(imagePromises.concat(imagePromises));\r\n            this.createTimeRecord(links)\r\n  \r\n          } catch (error) {\r\n            console.error(error);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n\t}\r\n}\r\n}\r\n</script>\r\n"]}]}